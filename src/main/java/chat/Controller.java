package chat;

import chat.model.ChatRoom;
import chat.model.Message;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Controlador de la aplicación. Por favor, revise detenidamente la clase y complete las partes omitidas
 * atendiendo a los comentarios indicados mediante @TODO
 */
public class Controller {

    private final String DB_SERVER = "localhost";
    private final int DB_PORT = 3306;
    private final String DB_NAME = "chat";
    private final String DB_USER = "root";
    private final String DB_PASS = "root";

    private Connection conn;

    /**
     * Crea un nuevo controlador
     */
    public Controller () {

        try {
            Class.forName("org.mariadb.jdbc.Driver");

            String url = "jdbc:mariadb://" + DB_SERVER + ":" + DB_PORT + "/" + DB_NAME;
            this.conn = DriverManager.getConnection(url, DB_USER, DB_PASS);


        } catch (Exception e) {
            System.err.println("Ha ocurrido un error al conectar con la base de datos");
            e.printStackTrace();
        }
    }

    /**
     * Crea un nuevo usuario en la aplicación
     * @param nickname nombre de usuario
     * @return id del nuevo usuario creado
     * @throws SQLException
     */
    public long createUser(String nickname) throws SQLException {

        // @TODO: complete este método para que cree un nuevo usuario en la base de datos
        // Al haberse definido el atributo 'id' de la tabla 'users' como AUTO_INCREMENT, este será generado
        // automáticamente por la base de datos. Para recuperar el 'id' generado para un usuario deberá:
        //  (1) Instanciar un nuevo PreparedStatement dando como valor al segundo parámetro Statement.RETURN_GENERATED_KEYS
        //  (2) Recuperar el id generado mediante una llamada al método privado this.getAutogeneratedId(stmt)

        try {
            String consulta = "INSERT INTO users (id,username) VALUES (?,?)";
            PreparedStatement pstm = conn.prepareStatement(consulta,Statement.RETURN_GENERATED_KEYS);
            pstm.setString(1,null);
            pstm.setString(2,nickname);
            pstm.executeUpdate();
            return this.getAutogeneratedId(pstm);
        }catch (SQLException ERR){
            System.err.println("Ha ocurrido un error al conectar con la base de datos");
            ERR.printStackTrace();
            return 0;
        }
    }

    /**
     * Crea una nueva sala de chat
     * @param userpk id del usuario que crea la sala de chat
     * @param CRName nombre de la sala de chat
     * @return id de la nueva sala de chat creada
     * @throws SQLException
     */
    public long createChatRoom (long userpk, String CRName) throws SQLException {

        // @TODO: complete este método para que cree una nueva sala de chat en la base de datos
        // Al haberse definido el atributo 'id' de la tabla 'chatrooms' como AUTO_INCREMENT, este será generado
        // automáticamente por la base de datos. Para recuperar el 'id' generado para una sala de chat deberá:
        //  (1) Instanciar un nuevo PreparedStatement dando como valor al segundo parámetro Statement.RETURN_GENERATED_KEYS
        //  (2) Recuperar el id generado mediante una llamada al método privado this.getAutogeneratedId(stmt)
        try {
            String consulta = "INSERT INTO chatrooms (id,name,createdBy) VALUES (?,?,?)";
            PreparedStatement pstm = conn.prepareStatement(consulta,Statement.RETURN_GENERATED_KEYS);
            pstm.setString(1,null);
            pstm.setString(2,CRName);
            pstm.setLong(3,userpk);
            pstm.executeUpdate();
            return this.getAutogeneratedId(pstm);
        }catch (SQLException ERR){
            System.err.println("Ha ocurrido un error al crear una sala");
            ERR.printStackTrace();
            return 0;
        }
    }

    /**
     * Crea un nuevo mensaje en una sala de chat
     * @param userpk id del usuario que crea el mensaje
     * @param chatRoompk id de la sala de chat en la que se crea el mensaje
     * @param content contenido del mensaje
     * @throws SQLException
     */
    public void sendMessage (long userpk, long chatRoompk, String content) throws SQLException {

        // @TODO: complete este método para que cree un nuevo mensaje en la base de datos
        //
        // Tenga en cuenta que las columnas 'id' y 'ts' generan el valor de sus atributos de forma automática. No
        // es necesario definir ningún valor para las mismas.
        // El 'id' del mensaje no es necesario recuperarlo.

        try {
            String consulta = "INSERT INTO messages (id,text,chatRoom,createdBy,ts) VALUES (?,?,?,?,?)";
            PreparedStatement pstm = conn.prepareStatement(consulta,Statement.RETURN_GENERATED_KEYS);
            pstm.setString(1,null);
            pstm.setString(2,content);
            pstm.setLong(3,chatRoompk);
            pstm.setLong(4,userpk);
            pstm.setString(5,null);
            pstm.executeUpdate();
        }catch (SQLException ERR){
            System.err.println("Ha ocurrido un error en el envio del mensaje");
            ERR.printStackTrace();

        }
    }

    /**
     * Recupera los mensajes de una sala de chat
     * @param chatRoompk id de la sala de chat
     * @return Lista de mensajes
     * @throws SQLException
     */
    public List<Message> getMessages (long chatRoompk) throws SQLException {

        // @TODO: complete este método para que consulte los mensajes de una sala de chat y los devuelva como una lista de objetos Message
        // Tenga en cuenta que la consulta a la base de datos le devolverá un ResultSet que deberá transformar
        // en una lista de instancias de objetos Message. Consulte la clase chat.model.Message para ver como crear
        // instancias de la misma
        //TODO: terminar despues de SendMessage
        try {
            List<Message> mensajes = new ArrayList<Message>();
            ResultSet rs = null;
            String consulta = "SELECT * FROM messages WHERE chatRoom = (?)";
            PreparedStatement pstm = conn.prepareStatement(consulta);
            pstm.setLong(1,chatRoompk);
            pstm.executeQuery();
            rs = pstm.getResultSet();
            while(rs.next()) {
                Message nuevo = new Message(rs.getString(2),rs.getString(4));
                mensajes.add(nuevo);
            }
            return mensajes;
        }catch (SQLException ERR){
            System.err.println("Ha ocurrido un error al obtener los mensajes del servidor");
            ERR.printStackTrace();
        }

        return null;
    }

    /**
     * Recupera un listado con todas las salas de chat
     * @return listado con las salas de chat
     * @throws SQLException
     */
    public List<ChatRoom> getChatRooms () throws SQLException {

        // @TODO: complete este método para que consulte todas las salas de chat y las devuelva como una lista de objetos ChatRoom
        // Tenga en cuenta que la consulta a la base de datos le devolverá un ResultSet que deberá transformar
        // en una lista de instancias de objetos ChatRoom. Consulte la clase chat.model.ChatRoom para ver como crear
        // instancias de la misma
        try {
            List<ChatRoom> chatRooms = new ArrayList<ChatRoom>();
            String consulta = "SELECT * FROM chatrooms";
            ResultSet rs = null;
            PreparedStatement pstm = conn.prepareStatement(consulta);
            pstm.executeQuery();
            rs = pstm.getResultSet();
            while(rs.next()) {
                ChatRoom nuevo = new ChatRoom(rs.getInt(1),rs.getString(2));
                chatRooms.add(nuevo);
            }
            return chatRooms;
        }catch (SQLException ERR){
            System.err.println("Ha ocurrido un error al consultar las salas del chat");
            ERR.printStackTrace();
        }
        return null;
    }

    /**
     * Devuelve el id generado por un Statement
     * @param stmt el Statement
     * @return el id
     * @throws SQLException
     */
    private long getAutogeneratedId (Statement stmt) throws SQLException {
        ResultSet keys = stmt.getGeneratedKeys();
        keys.next();
        return keys.getLong(1);
    }

    /**
     * Borra los mensajes de un chat y de un usuario específico
     * @param nickname el nombre (string) del usuario
     * @param chatRoompk el ID de la sala de chat
     * @return el número de mensajes borrados
     * @throws SQLException
     */
    public int deleteMessages (String nickname, long chatRoompk) throws SQLException {
        // @TODO: complete este método para que borre todos los mensajes de ese ususario en ese chat
        // y devuelva el número de mensajes borrados(número de filas afectadas por stmt.executeUpdate
        // para ello busque qué tipo de dato devuelve esta sentencia y qué significa
        //TODO: terminar despues de getChatRooms
       try {
           String consulta = "DELETE FROM messages WHERE chatRoom = (?) AND createdBy = (?)";
           PreparedStatement pstm = conn.prepareStatement(consulta);
           pstm.setLong(1,chatRoompk);
           pstm.setString(2,nickname);
           pstm.executeUpdate(); //Devuelve el numero de datos afectados por tanto basta con hacer un return
       }catch (SQLException ERR){
           System.err.println("Ha ocurrido un error al eliminar sus mensajes del chat");
           ERR.printStackTrace();
       }
        return 0;
    }
}
